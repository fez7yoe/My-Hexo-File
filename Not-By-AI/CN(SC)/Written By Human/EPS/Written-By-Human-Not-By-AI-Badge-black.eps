%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.7.4 (Build 20G1120) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0.89541203 42 m
116.0387 42 l
124.0467 42 130.5387 35.508129 130.5387 27.500031 c
130.5387 1.326031 l
15.395412 1.326031 l
7.3872819 1.326031 0.89541203 7.8179312 0.89541203 15.826031 c
0.89541203 42 l
h
W
0 0 132 43 rc
-0.104588 43 m
131.5387 43 l
131.5387 0.326031 l
-0.104588 0.326031 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 0.89541203 42 cm
0 0 m
115.14329 0 l
123.15129 0 129.6433 6.491869 129.6433 14.499969 c
129.6433 40.673969 l
14.5 40.673969 l
6.4918699 40.673969 0 34.182068 0 26.173969 c
0 0 l
h
S
Q
1 1 1 sc
q
18.369902 18.630732 m
21.883001 15.785831 26.907202 15.785831 30.420301 18.630732 c
29.062002 20.30813 l
26.340902 18.104631 22.449303 18.104631 19.728203 20.30813 c
18.369902 18.630732 l
h
W
0 0 132 43 rc
17.369902 21.30813 m
31.420301 21.30813 l
31.420301 14.785831 l
17.369902 14.785831 l
h
f
Q
q
19.833002 22.32423 2.1584001 2.9159999 rc
18.833002 26.240231 m
22.991402 26.240231 l
22.991402 21.32423 l
18.833002 21.32423 l
h
f
Q
q
26.530602 22.32423 2.1584001 2.9159999 rc
25.530602 26.240231 m
29.689001 26.240231 l
29.689001 21.32423 l
25.530602 21.32423 l
h
f
Q
q
35.640602 21.324331 m
35.640602 14.886831 30.422003 9.668231 23.984503 9.668231 c
17.547102 9.668231 12.328502 14.886831 12.328502 21.324331 c
12.328502 27.76173 17.547102 32.98035 23.984503 32.98035 c
30.422003 32.98035 35.640602 27.76173 35.640602 21.324331 c
h
33.482201 21.324331 m
33.482201 16.078932 29.229902 11.826631 23.984503 11.826631 c
18.739101 11.826631 14.486902 16.078932 14.486902 21.324331 c
14.486902 26.569731 18.739101 30.821932 23.984503 30.821932 c
29.229902 30.821932 33.482201 26.569731 33.482201 21.324331 c
h
W*
0 0 132 43 rc
11.328502 33.98035 m
36.640602 33.98035 l
36.640602 8.668231 l
11.328502 8.668231 l
h
f
Q
q
62.871601 29.784632 m
63.073002 29.049831 l
63.260601 29.115431 l
63.550903 29.216831 63.864502 29.326431 64.1903 29.440331 c
64.1903 26.805132 l
64.1903 26.674231 64.139999 26.63393 64.009102 26.63393 c
63.898403 26.63393 63.525902 26.63393 63.093102 26.644032 c
63.193703 26.432631 63.294403 26.110531 63.3246 25.919231 c
63.938602 25.919231 64.321205 25.93943 64.5728 26.06023 c
64.8144 26.18103 64.904999 26.392431 64.904999 26.81513 c
64.904999 29.69083 l
65.260605 29.815632 65.620705 29.942331 65.972 30.06653 c
65.861305 30.76103 l
65.542404 30.649931 65.2202 30.539631 64.904999 30.433632 c
64.904999 32.401833 l
65.861305 32.401833 l
65.861305 33.106472 l
64.904999 33.106472 l
64.904999 35.129761 l
64.1903 35.129761 l
64.1903 33.106472 l
63.022602 33.106472 l
63.022602 32.401833 l
64.1903 32.401833 l
64.1903 30.196831 l
63.693001 30.034731 63.237404 29.891932 62.871601 29.784632 c
h
W
0 0 132 43 rc
61.871601 36.129761 m
66.972 36.129761 l
66.972 24.919231 l
61.871601 24.919231 l
h
f
Q
q
67.099403 31.234131 m
66.374603 31.234131 66.193405 31.495932 66.193405 32.230732 c
66.193405 34.717052 l
68.830803 34.717052 l
68.830803 32.723961 l
66.827599 32.723961 l
66.827599 32.220631 l
66.827599 31.90863 66.877899 31.818031 67.099403 31.818031 c
68.3778 31.818031 l
68.559006 31.818031 68.830803 31.828032 68.991798 31.858231 c
68.998405 31.805731 69.005005 31.742432 69.011902 31.675732 c
69.026199 31.538132 69.041901 31.38623 69.062302 31.284531 c
68.921402 31.24423 68.659599 31.234131 68.387901 31.234131 c
67.099403 31.234131 l
h
66.827599 34.193611 m
68.216705 34.193611 l
68.216705 33.247402 l
66.827599 33.247402 l
66.827599 34.193611 l
h
W*
0 0 132 43 rc
65.193405 35.717052 m
70.062302 35.717052 l
70.062302 30.234131 l
65.193405 30.234131 l
h
f
Q
q
70.169601 31.284531 m
69.454903 31.284531 69.273705 31.536131 69.273705 32.27103 c
69.273705 34.717052 l
71.921104 34.717052 l
71.921104 32.754162 l
69.907799 32.754162 l
69.907799 32.260929 l
69.907799 31.958931 69.958199 31.858231 70.189705 31.858231 c
71.528503 31.858231 l
71.709702 31.858231 72.011703 31.878431 72.172699 31.918631 c
72.1828 31.737532 72.213005 31.475731 72.233101 31.334831 c
72.092201 31.284531 71.820404 31.284531 71.538605 31.284531 c
70.169601 31.284531 l
h
69.907799 34.193611 m
71.317101 34.193611 l
71.317101 33.277599 l
69.907799 33.277599 l
69.907799 34.193611 l
h
W*
0 0 132 43 rc
68.273705 35.717052 m
73.233101 35.717052 l
73.233101 30.284531 l
68.273705 30.284531 l
h
f
Q
q
67.904701 27.761332 m
67.341003 27.197632 66.374603 26.674231 65.509003 26.342031 c
65.680099 26.221231 65.961899 25.979631 66.092804 25.848831 c
66.938301 26.231331 67.965103 26.865532 68.589203 27.499632 c
67.904701 27.761332 l
h
W
0 0 132 43 rc
64.509003 28.761332 m
69.589203 28.761332 l
69.589203 24.848831 l
64.509003 24.848831 l
h
f
Q
q
69.545502 27.429232 m
70.310501 26.956131 71.297005 26.261532 71.790199 25.82863 c
72.414299 26.231331 l
71.8909 26.674231 70.894302 27.338631 70.139404 27.791531 c
69.545502 27.429232 l
h
W
0 0 132 43 rc
68.545502 28.791531 m
73.414299 28.791531 l
73.414299 24.82863 l
68.545502 24.82863 l
h
f
Q
q
51.396301 25.899132 m
50.711803 26.281631 49.564201 26.764832 48.426804 27.137232 c
48.899902 27.640532 l
50.037403 27.278231 51.275501 26.805132 52.010303 26.422531 c
51.396301 25.899132 l
h
W
0 0 132 43 rc
47.426804 28.640532 m
53.010303 28.640532 l
53.010303 24.899132 l
47.426804 24.899132 l
h
f
Q
q
42.840103 26.432631 m
43.917202 26.69433 45.266003 27.207731 45.940403 27.640532 c
46.635002 27.197632 l
45.789501 26.684332 44.440601 26.160831 43.363503 25.87903 c
43.252804 26.030031 43.001102 26.291731 42.840103 26.432631 c
h
W
0 0 132 43 rc
41.840103 28.640532 m
47.635002 28.640532 l
47.635002 24.87903 l
41.840103 24.87903 l
h
f
Q
q
57.129501 34.905571 m
57.131001 34.97467 57.132401 35.040051 57.134003 35.09956 c
57.969402 35.09956 l
57.968502 35.055969 l
57.960403 34.696331 57.949501 34.21059 57.904503 33.64505 c
58.046402 32.46133 58.659302 28.191631 62.247501 26.593731 c
62.0261 26.422531 61.804604 26.160831 61.693901 25.94943 c
59.163101 27.13183 58.072701 29.616531 57.577801 31.497532 c
57.103603 29.482632 56.031601 27.22953 53.570602 25.909231 c
53.439701 26.110531 53.188004 26.342031 52.956501 26.503132 c
56.991802 28.544931 57.092003 33.17355 57.129501 34.905571 c
h
W
0 0 132 43 rc
51.956501 36.09956 m
63.247501 36.09956 l
63.247501 24.909231 l
51.956501 24.909231 l
h
f
Q
q
76.211105 32.613232 m
76.290802 33.000622 76.365501 33.380253 76.430702 33.730572 c
75.675705 33.8111 l
75.4543 32.542732 75.0718 30.82143 74.7798 29.794731 c
75.544899 29.724232 l
75.572899 29.828032 75.602005 29.939131 75.631905 30.056431 c
79.553703 30.056431 l
79.513 29.610231 79.471298 29.215931 79.428101 28.868631 c
73.209503 28.868631 l
73.209503 28.16403 l
79.327805 28.16403 l
79.183701 27.287531 79.019501 26.83753 78.816299 26.664131 c
78.695602 26.563532 78.574799 26.553431 78.343201 26.553431 c
78.091599 26.553431 77.397003 26.553431 76.702499 26.623932 c
76.833305 26.422531 76.934006 26.12063 76.954102 25.909231 c
77.608398 25.868927 78.262703 25.858831 78.594902 25.87903 c
78.977402 25.899132 79.2089 25.969631 79.4505 26.201132 c
79.7173 26.467932 79.913399 27.026531 80.085701 28.16403 c
82.208603 28.16403 l
82.208603 28.868631 l
80.180603 28.868631 l
80.233505 29.306931 80.284904 29.810431 80.336304 30.388632 c
80.346405 30.499331 80.366501 30.730831 80.366501 30.730831 c
75.796906 30.730831 l
75.887299 31.113531 75.980705 31.528631 76.071205 31.948832 c
80.487305 31.948832 l
80.487305 32.613232 l
76.211105 32.613232 l
h
W
0 0 132 43 rc
72.209503 34.8111 m
83.208603 34.8111 l
83.208603 24.858831 l
72.209503 24.858831 l
h
f
Q
q
66.233704 30.348331 m
66.233704 29.70413 l
67.582603 29.70413 l
67.582603 28.53643 l
65.810905 28.53643 l
65.810905 27.892231 l
72.223 27.892231 l
72.223 28.53643 l
70.652702 28.53643 l
70.652702 29.70413 l
71.991501 29.70413 l
71.991501 30.348331 l
70.652702 30.348331 l
70.652702 31.032831 l
69.958199 31.032831 l
69.958199 30.348331 l
68.267105 30.348331 l
68.267105 31.012732 l
67.582603 31.012732 l
67.582603 30.348331 l
66.233704 30.348331 l
h
68.267105 28.53643 m
68.267105 29.70413 l
69.958199 29.70413 l
69.958199 28.53643 l
68.267105 28.53643 l
h
W*
0 0 132 43 rc
64.810905 32.032829 m
73.223 32.032829 l
73.223 26.892231 l
64.810905 26.892231 l
h
f
Q
q
43.031303 27.801632 m
43.031303 28.445831 l
44.480904 28.445831 l
44.480904 32.99575 l
47.017502 32.99575 l
47.017502 33.62991 l
43.313202 33.62991 l
43.313202 34.28421 l
47.017502 34.28421 l
47.017502 35.11969 l
47.762402 35.11969 l
47.762402 34.28421 l
51.708302 34.28421 l
51.708302 33.62991 l
47.762402 33.62991 l
47.762402 32.99575 l
50.550701 32.99575 l
50.550701 28.445831 l
51.970001 28.445831 l
51.970001 27.801632 l
43.031303 27.801632 l
h
45.205601 28.445831 m
49.795803 28.445831 l
49.795803 29.150532 l
45.205601 29.150532 l
45.205601 28.445831 l
h
45.205601 29.633631 m
49.795803 29.633631 l
49.795803 30.237631 l
45.205601 30.237631 l
45.205601 29.633631 l
h
45.205601 30.730831 m
49.795803 30.730831 l
49.795803 31.324732 l
45.205601 31.324732 l
45.205601 30.730831 l
h
45.205601 31.797831 m
49.795803 31.797831 l
49.795803 32.462231 l
45.205601 32.462231 l
45.205601 31.797831 l
h
W*
0 0 132 43 rc
42.031303 36.11969 m
52.970001 36.11969 l
52.970001 26.801632 l
42.031303 26.801632 l
h
f
Q
q
73.451103 32.381729 m
73.451103 34.586189 l
81.967003 34.586189 l
81.967003 32.381729 l
81.1819 32.381729 l
81.1819 33.881561 l
74.195999 33.881561 l
74.195999 32.381729 l
73.451103 32.381729 l
h
W
0 0 132 43 rc
72.451103 35.586189 m
82.967003 35.586189 l
82.967003 31.381731 l
72.451103 31.381731 l
h
f
Q
q
105.8147 16.389132 m
105.8147 16.645531 105.8307 17.206331 105.8307 17.206331 c
101.9057 17.206331 l
101.9057 18.728331 l
106.0687 18.728331 l
106.2607 16.41543 106.6067 14.205631 107.1497 12.408731 c
106.27171 11.435931 105.2517 10.621731 104.1007 9.9964314 c
104.5967 9.5478306 105.4457 8.5705309 105.7827 8.0738306 c
106.6357 8.6117306 107.4297 9.2524309 108.16071 9.9843311 c
108.8427 8.8286314 109.7007 8.1379309 110.7657 8.1379309 c
112.4157 8.1379309 113.1687 8.8108311 113.5207 11.935131 c
112.89671 12.175431 112.0787 12.720131 111.5507 13.264931 c
111.4707 11.310231 111.2777 10.509131 110.9577 10.509131 c
110.5717 10.509131 110.1797 11.044231 109.8207 11.949431 c
110.9767 13.563131 111.9047 15.456931 112.5757 17.558731 c
110.2207 18.119532 l
109.9047 17.019531 109.4907 15.987431 108.9837 15.038331 c
108.7687 16.155231 108.5937 17.411831 108.4777 18.728331 c
113.3607 18.728331 l
113.3607 21.019531 l
111.6567 21.019531 l
112.4637 21.852631 l
111.9027 22.38133 110.7817 23.08633 109.9647 23.51893 c
108.5547 22.125031 l
109.0587 21.814831 109.6557 21.410931 110.1567 21.019531 c
108.3387 21.019531 l
108.3147 21.756432 108.3107 22.49773 108.3297 23.230532 c
105.8787 23.230532 l
105.8817 22.49983 105.89771 21.759531 105.9277 21.019531 c
99.453705 21.019531 l
99.453705 16.212931 l
99.453705 14.114031 99.373802 11.278231 98.188103 9.3876314 c
98.716904 9.1152306 99.774704 8.2500315 100.17471 7.7854309 c
100.9917 9.0148306 101.4357 10.726831 101.6697 12.431431 c
101.9877 11.852731 102.2267 10.980731 102.25771 10.316831 c
102.99471 10.316831 103.6677 10.332931 104.1007 10.413031 c
104.5807 10.509131 104.9497 10.669331 105.3017 11.134031 c
105.6867 11.646731 105.7667 13.120731 105.8147 16.389132 c
h
101.6777 12.491631 m
101.7967 13.385331 101.8597 14.275531 101.8867 15.091431 c
103.5447 15.091431 l
103.5097 13.496431 103.4497 12.835431 103.3147 12.640031 c
103.1867 12.479831 103.0427 12.431731 102.8347 12.431731 c
102.5857 12.431731 102.1567 12.446831 101.6777 12.491631 c
h
W*
0 0 132 43 rc
97.188103 24.51893 m
114.5207 24.51893 l
114.5207 6.7854309 l
97.188103 6.7854309 l
h
f
Q
q
87.298103 20.458731 m
87.563103 21.140532 87.799706 21.842331 87.998199 22.541632 c
85.578903 23.08633 l
85.034203 20.92333 84.008804 18.728331 82.775101 17.414532 c
83.367905 17.094131 84.409302 16.405231 84.873901 16.004631 c
85.353806 16.60293 85.826401 17.349031 86.266205 18.183632 c
89.344101 18.183632 l
89.344101 15.732231 l
85.194405 15.732231 l
85.194405 13.489231 l
89.344101 13.489231 l
89.344101 10.733431 l
83.287804 10.733431 l
83.287804 8.4583311 l
97.867699 8.4583311 l
97.867699 10.733431 l
91.779404 10.733431 l
91.779404 13.489231 l
96.377701 13.489231 l
96.377701 15.732231 l
91.779404 15.732231 l
91.779404 18.183632 l
97.018501 18.183632 l
97.018501 20.458731 l
91.779404 20.458731 l
91.779404 23.246531 l
89.344101 23.246531 l
89.344101 20.458731 l
87.298103 20.458731 l
h
W
0 0 132 43 rc
81.775101 24.246531 m
98.867699 24.246531 l
98.867699 7.4583311 l
81.775101 7.4583311 l
h
f
Q
q
47.637802 14.212031 m
47.732101 14.640831 47.780201 15.048331 47.793404 15.411831 c
44.128304 15.411831 l
44.128304 17.510731 l
47.797302 17.510731 l
47.797302 19.11293 l
43.968102 19.11293 l
43.968102 21.275831 l
47.797302 21.275831 l
47.797302 23.166431 l
50.104401 23.166431 l
50.104401 15.652131 l
50.104401 12.848331 49.239304 9.6920309 45.313904 7.8014312 c
44.929401 8.3622313 44.208401 9.083231 43.647602 9.5318308 c
45.063602 10.070631 46.030003 10.945831 46.671204 11.909831 c
45.945103 11.793831 45.236504 11.681931 44.575703 11.577531 c
43.695702 11.438431 l
43.279102 13.761631 l
44.4104 13.858931 45.994102 14.030131 47.637802 14.212031 c
h
W
0 0 132 43 rc
42.279102 24.166431 m
51.104401 24.166431 l
51.104401 6.8014312 l
42.279102 6.8014312 l
h
f
Q
q
73.057205 8.4437313 m
67.9963 22.734631 l
64.622299 22.734631 l
59.522602 8.4437313 l
62.644501 8.4437313 l
63.633404 11.381431 l
68.897903 11.381431 l
69.819 8.4437313 l
73.057205 8.4437313 l
h
66.280205 19.467331 m
68.064102 13.844031 l
64.438103 13.844031 l
66.280205 19.467331 l
h
W*
0 0 132 43 rc
58.522602 23.734631 m
74.057205 23.734631 l
74.057205 7.4437308 l
58.522602 7.4437308 l
h
f
Q
q
54.061802 23.166431 m
54.061802 21.275831 l
58.259602 21.275831 l
58.259602 19.11293 l
54.061802 19.11293 l
54.061802 17.510731 l
57.875103 17.510731 l
57.875103 15.411831 l
54.061802 15.411831 l
54.061802 13.777631 l
58.548 13.777631 l
58.548 11.614631 l
54.061802 11.614631 l
54.061802 8.0257311 l
51.722603 8.0257311 l
51.722603 23.166431 l
54.061802 23.166431 l
h
W
0 0 132 43 rc
50.722603 24.166431 m
59.548 24.166431 l
59.548 7.0257311 l
50.722603 7.0257311 l
h
f
Q
q
75.602905 20.303732 m
75.602905 10.871331 l
73.842606 10.871331 l
73.842606 8.4404306 l
80.125 8.4404306 l
80.125 10.871331 l
78.569702 10.871331 l
78.569702 20.303732 l
80.125 20.303732 l
80.125 22.734631 l
73.842606 22.734631 l
73.842606 20.303732 l
75.602905 20.303732 l
h
W
0 0 132 43 rc
72.842606 23.734631 m
81.125 23.734631 l
81.125 7.4404311 l
72.842606 7.4404311 l
h
f
ep
end
%%Trailer
%%EOF
