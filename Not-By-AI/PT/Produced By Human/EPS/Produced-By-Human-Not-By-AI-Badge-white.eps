%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.1437 42 l
124.1517 42 130.64371 35.508133 130.64371 27.5 c
130.64371 1.326003 l
15.5 1.326003 l
7.4918718 1.326003 1 7.817903 1 15.826003 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
131.64371 43 l
131.64371 0.32600299 l
0 0.32600299 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.1437 0 l
123.1517 0 129.64371 6.4918671 129.64371 14.5 c
129.64371 40.673996 l
14.5 40.673996 l
6.4918718 40.673996 0 34.182098 0 26.173998 c
0 0 l
h
S
Q
q
106.6877 15.547903 m
109.9687 15.547903 l
108.35471 20.635803 l
106.6877 15.547903 l
h
106.85471 23.592003 m
109.9067 23.592003 l
114.4867 10.661703 l
111.5567 10.661703 l
110.7227 13.319703 l
105.9597 13.319703 l
105.0647 10.661703 l
102.2407 10.661703 l
106.85471 23.592003 l
h
W
0 0 132 43 rc
101.2407 24.592003 m
115.4867 24.592003 l
115.4867 9.6617031 l
101.2407 9.6617031 l
h
f
Q
q
116.7897 10.661703 2.684 12.9303 rc
115.7897 24.592003 m
120.4737 24.592003 l
120.4737 9.6617031 l
115.7897 9.6617031 l
h
f
Q
q
115.1967 21.392603 5.6849999 2.1993999 rc
114.1967 24.592003 m
121.8817 24.592003 l
121.8817 20.392603 l
114.1967 20.392603 l
h
f
Q
q
115.1967 10.658703 5.6849999 2.1995001 rc
114.1967 13.858203 m
121.8817 13.858203 l
121.8817 9.6587029 l
114.1967 9.6587029 l
h
f
Q
q
47.280602 20.577103 m
48.279202 20.577103 49.094704 20.314102 49.726902 19.788202 c
50.365101 19.268204 50.6842 18.402502 50.6842 17.191202 c
50.6842 10.685303 l
48.096001 10.685303 l
48.096001 16.561903 l
48.096001 17.070004 48.028103 17.460003 47.8922 17.731804 c
47.644001 18.228203 47.171303 18.476402 46.474003 18.476402 c
45.617203 18.476402 45.029202 18.113003 44.710102 17.386204 c
44.544701 17.002104 44.462002 16.511602 44.462002 15.914803 c
44.462002 10.685303 l
41.944702 10.685303 l
41.944702 20.328903 l
44.382202 20.328903 l
44.382202 18.919603 l
44.707203 19.415903 45.014503 19.773403 45.304001 19.992104 c
45.824001 20.382103 46.482903 20.577103 47.280602 20.577103 c
h
W
0 0 132 43 rc
40.944702 21.577103 m
51.6842 21.577103 l
51.6842 9.6853027 l
40.944702 9.6853027 l
h
f
Q
q
57.443604 15.383003 m
57.284 15.282503 57.121502 15.199803 56.9561 15.134803 c
56.796501 15.075703 56.574902 15.019603 56.291302 14.966403 c
55.724003 14.860003 l
55.192204 14.765503 54.811104 14.650303 54.580601 14.514403 c
54.190601 14.283903 53.995602 13.926403 53.995602 13.441903 c
53.995602 13.010503 54.113804 12.697303 54.350201 12.502303 c
54.592403 12.313203 54.884903 12.218703 55.227703 12.218703 c
55.771301 12.218703 56.270603 12.378203 56.725601 12.697303 c
57.186501 13.016403 57.4258 13.598503 57.443604 14.443503 c
57.443604 15.383003 l
h
55.910202 16.561903 m
56.377003 16.620903 56.7108 16.694803 56.911701 16.783403 c
57.272202 16.937103 57.4524 17.176403 57.4524 17.501404 c
57.4524 17.897303 57.313602 18.169104 57.035801 18.316803 c
56.764004 18.470503 56.362202 18.547302 55.830402 18.547302 c
55.233601 18.547302 54.811104 18.399603 54.562901 18.104103 c
54.385601 17.885504 54.267403 17.590002 54.208302 17.217802 c
51.770901 17.217802 l
51.824001 18.062803 52.060402 18.757103 52.4799 19.300703 c
53.147701 20.151604 54.294003 20.577103 55.919003 20.577103 c
56.976704 20.577103 57.916302 20.367304 58.737602 19.947702 c
59.559002 19.528202 59.969704 18.736403 59.969704 17.572304 c
59.969704 13.140503 l
59.969704 12.833203 59.975601 12.461003 59.987404 12.023703 c
60.0051 11.692803 60.055401 11.468303 60.138103 11.350103 c
60.220802 11.231903 60.344902 11.134403 60.510403 11.057603 c
60.510403 10.685303 l
57.762604 10.685303 l
57.685802 10.880303 57.632603 11.063503 57.603104 11.234803 c
57.573601 11.406203 57.549904 11.601203 57.532204 11.819803 c
57.183601 11.441703 56.7817 11.119603 56.326702 10.853703 c
55.7831 10.540503 55.168602 10.383903 54.483101 10.383903 c
53.608601 10.383903 52.884701 10.632103 52.311501 11.128503 c
51.744301 11.630803 51.460602 12.339803 51.460602 13.255703 c
51.460602 14.443503 51.918602 15.303203 52.834503 15.835003 c
53.336803 16.124603 54.075401 16.331404 55.050404 16.455503 c
55.910202 16.561903 l
h
54.8997 23.998404 m
55.059303 23.998404 55.215801 23.980703 55.369503 23.945204 c
55.523102 23.909803 55.653103 23.871403 55.759502 23.830004 c
56.592701 23.519802 l
56.840801 23.437002 57.003304 23.383904 57.080101 23.360203 c
57.157001 23.336603 57.242603 23.324802 57.3372 23.324802 c
57.620804 23.324802 57.818802 23.398603 57.931103 23.546404 c
58.049202 23.700003 58.134903 23.880203 58.188103 24.087004 c
59.367001 24.087004 l
59.260601 23.466602 59.047901 22.946604 58.728802 22.527002 c
58.415604 22.107504 57.9547 21.897703 57.346104 21.897703 c
57.162903 21.897703 56.902901 21.942003 56.566101 22.030703 c
56.371101 22.078003 56.184902 22.131104 56.007702 22.190203 c
55.289703 22.429502 l
55.189201 22.465002 55.091702 22.488604 54.997204 22.500504 c
54.902702 22.518204 54.808102 22.527002 54.7136 22.527002 c
54.489002 22.527002 54.305801 22.462004 54.164001 22.332003 c
54.022202 22.196102 53.921803 22.010002 53.862701 21.773603 c
52.710403 21.773603 l
52.840401 22.382303 53.008801 22.843203 53.215603 23.156403 c
53.593803 23.717703 54.155201 23.998404 54.8997 23.998404 c
h
W
0 0 132 43 rc
50.460602 25.087004 m
61.510403 25.087004 l
61.510403 9.3839025 l
50.460602 9.3839025 l
h
f
Q
q
65.647705 12.466903 m
66.386299 12.466903 66.953606 12.729803 67.349503 13.255703 c
67.745399 13.781603 67.943298 14.529103 67.943298 15.498203 c
67.943298 16.467302 67.745399 17.211903 67.349503 17.731804 c
66.953606 18.257803 66.386299 18.520702 65.647705 18.520702 c
64.909004 18.520702 64.338799 18.257803 63.937 17.731804 c
63.541103 17.211903 63.343201 16.467302 63.343201 15.498203 c
63.343201 14.529103 63.541103 13.781603 63.937 13.255703 c
64.338799 12.729803 64.909004 12.466903 65.647705 12.466903 c
h
70.593605 15.498203 m
70.593605 14.080103 70.185799 12.865703 69.370399 11.855303 c
68.554901 10.850803 67.317001 10.348503 65.656502 10.348503 c
63.996101 10.348503 62.758202 10.850803 61.942703 11.855303 c
61.1273 12.865703 60.719501 14.080103 60.719501 15.498203 c
60.719501 16.892803 61.1273 18.101204 61.942703 19.123404 c
62.758202 20.145702 63.996101 20.656803 65.656502 20.656803 c
67.317001 20.656803 68.554901 20.145702 69.370399 19.123404 c
70.185799 18.101204 70.593605 16.892803 70.593605 15.498203 c
h
W
0 0 132 43 rc
59.719501 21.656803 m
71.593605 21.656803 l
71.593605 9.3485031 l
59.719501 9.3485031 l
h
f
Q
q
80.681999 15.494203 m
80.681999 16.238703 80.510605 16.897602 80.1679 17.470703 c
79.8311 18.043903 79.281502 18.330503 78.519302 18.330503 c
77.603401 18.330503 76.973999 17.896202 76.631302 17.027603 c
76.454102 16.566704 76.365402 15.981703 76.365402 15.272603 c
76.365402 14.149903 76.663803 13.361003 77.260605 12.906003 c
77.615204 12.640103 78.034698 12.507103 78.519302 12.507103 c
79.222404 12.507103 79.757202 12.779003 80.123604 13.322603 c
80.495804 13.866203 80.681999 14.590103 80.681999 15.494203 c
h
79.246101 20.537502 m
80.374702 20.537502 81.329002 20.121002 82.109001 19.287804 c
82.894905 18.454603 83.287903 17.231403 83.287903 15.618303 c
83.287903 13.916503 82.903801 12.619403 82.135605 11.727203 c
81.373299 10.834903 80.389503 10.388803 79.184006 10.388803 c
78.415901 10.388803 77.777702 10.580803 77.269501 10.964903 c
76.991798 11.177603 76.720001 11.487803 76.454102 11.895603 c
76.454102 6.8610029 l
73.954498 6.8610029 l
73.954498 20.324802 l
76.374306 20.324802 l
76.374306 18.897802 l
76.646103 19.317303 76.9356 19.648203 77.242905 19.890503 c
77.804298 20.321903 78.472 20.537502 79.246101 20.537502 c
h
W
0 0 132 43 rc
72.954498 21.537502 m
84.287903 21.537502 l
84.287903 5.8610029 l
72.954498 5.8610029 l
h
f
Q
q
88.847305 12.445303 m
89.585899 12.445303 90.153198 12.708303 90.549103 13.234203 c
90.945 13.760103 91.142899 14.507603 91.142899 15.476703 c
91.142899 16.445704 90.945 17.190304 90.549103 17.710302 c
90.153198 18.236202 89.585899 18.499104 88.847305 18.499104 c
88.108604 18.499104 87.538399 18.236202 87.136604 17.710302 c
86.7407 17.190304 86.542702 16.445704 86.542702 15.476703 c
86.542702 14.507603 86.7407 13.760103 87.136604 13.234203 c
87.538399 12.708303 88.108604 12.445303 88.847305 12.445303 c
h
93.793098 15.476703 m
93.793098 14.058503 93.385399 12.844203 92.57 11.833703 c
91.754501 10.829203 90.516602 10.326903 88.856102 10.326903 c
87.195702 10.326903 85.957703 10.829203 85.142303 11.833703 c
84.326805 12.844203 83.919106 14.058503 83.919106 15.476703 c
83.919106 16.871202 84.326805 18.079603 85.142303 19.101904 c
85.957703 20.124104 87.195702 20.635303 88.856102 20.635303 c
90.516602 20.635303 91.754501 20.124104 92.57 19.101904 c
93.385399 18.079603 93.793098 16.871202 93.793098 15.476703 c
h
W
0 0 132 43 rc
82.919106 21.635303 m
94.793098 21.635303 l
94.793098 9.3269033 l
82.919106 9.3269033 l
h
f
Q
q
99.949799 20.555504 m
99.997101 20.555504 100.0355 20.552504 100.065 20.546602 c
100.1005 20.546602 100.1743 20.543703 100.2866 20.537804 c
100.2866 17.949602 l
100.12711 17.967302 99.985199 17.979103 99.861198 17.985003 c
99.737099 17.991003 99.636604 17.993902 99.559799 17.993902 c
98.543404 17.993902 97.860901 17.663004 97.512299 17.001204 c
97.317299 16.628902 97.219803 16.055702 97.219803 15.281703 c
97.219803 10.663703 l
94.676003 10.663703 l
94.676003 20.325003 l
97.086899 20.325003 l
97.086899 18.640903 l
97.476898 19.285004 97.816605 19.725304 98.106201 19.961603 c
98.578903 20.357504 99.193405 20.555504 99.949799 20.555504 c
h
W
0 0 132 43 rc
93.676003 21.555504 m
101.2866 21.555504 l
101.2866 9.663703 l
93.676003 9.663703 l
h
f
Q
q
44.124802 27.039904 m
44.499203 27.039904 44.809704 27.197002 45.056301 27.511204 c
45.305901 27.828503 45.430702 28.301304 45.430702 28.929804 c
45.430702 29.312902 45.375801 29.642103 45.2658 29.917503 c
45.0578 30.447203 44.677502 30.712004 44.124802 30.712004 c
43.569202 30.712004 43.188904 30.432203 42.983803 29.872602 c
42.873901 29.573303 42.818901 29.193203 42.818901 28.732304 c
42.818901 28.361202 42.873901 28.045504 42.983803 27.785103 c
43.191803 27.288303 43.572201 27.039904 44.124802 27.039904 c
h
42.047802 31.282204 m
42.827801 31.282204 l
42.827801 30.644703 l
42.9883 30.863203 43.163601 31.032303 43.353802 31.152002 c
43.624203 31.331602 43.942101 31.421303 44.307602 31.421303 c
44.8484 31.421303 45.307404 31.211803 45.684803 30.792904 c
46.062202 30.376904 46.250801 29.781303 46.250801 29.006104 c
46.250801 27.958702 45.979004 27.210503 45.435204 26.761602 c
45.090504 26.477203 44.689404 26.335102 44.231804 26.335102 c
43.872303 26.335102 43.570702 26.414404 43.327003 26.573004 c
43.184402 26.662804 43.025402 26.816902 42.850101 27.035402 c
42.850101 24.579803 l
42.047802 24.579803 l
42.047802 31.282204 l
h
W
0 0 132 43 rc
41.047802 32.421303 m
47.250801 32.421303 l
47.250801 23.579803 l
41.047802 23.579803 l
h
f
Q
q
46.802803 31.304604 m
47.564903 31.304604 l
47.564903 30.474104 l
47.6273 30.635702 47.780403 30.831802 48.024002 31.062202 c
48.2677 31.295603 48.548504 31.412403 48.866402 31.412403 c
48.881302 31.412403 48.906502 31.410904 48.942204 31.407904 c
48.977802 31.404903 49.0387 31.398903 49.124901 31.389902 c
49.124901 30.537003 l
49.0774 30.545902 49.032803 30.551903 48.991203 30.554903 c
48.952602 30.557903 48.9095 30.559402 48.8619 30.559402 c
48.457802 30.559402 48.147301 30.427704 47.930401 30.164404 c
47.713501 29.904003 47.605103 29.603203 47.605103 29.262003 c
47.605103 26.496702 l
46.802803 26.496702 l
46.802803 31.304604 l
h
W
0 0 132 43 rc
45.802803 32.412403 m
50.124901 32.412403 l
50.124901 25.496702 l
45.802803 25.496702 l
h
f
Q
q
54.587803 28.844503 m
54.587803 28.329803 54.696301 27.898804 54.9132 27.551603 c
55.1301 27.204502 55.477703 27.030903 55.9561 27.030903 c
56.327503 27.030903 56.632103 27.191004 56.869801 27.511204 c
57.1105 27.834503 57.230801 28.296904 57.230801 28.898403 c
57.230801 29.505903 57.107502 29.954903 56.860901 30.245203 c
56.614304 30.538504 56.309704 30.685102 55.947201 30.685102 c
55.543102 30.685102 55.214802 30.529503 54.9622 30.218203 c
54.712601 29.907003 54.587803 29.449102 54.587803 28.844503 c
h
55.795704 31.389902 m
56.161102 31.389902 56.467201 31.312103 56.713802 31.156504 c
56.856403 31.066704 57.018402 30.909603 57.1996 30.685102 c
57.1996 33.113773 l
57.970703 33.113773 l
57.970703 26.496702 l
57.248703 26.496702 l
57.248703 27.165604 l
57.061501 26.869303 56.840103 26.655302 56.584602 26.523603 c
56.329002 26.391903 56.036301 26.326103 55.706501 26.326103 c
55.174603 26.326103 54.714104 26.550604 54.324802 26.999502 c
53.9356 27.451403 53.741001 28.051403 53.741001 28.799603 c
53.741001 29.500004 53.917801 30.106003 54.2714 30.617804 c
54.627903 31.132504 55.136002 31.389902 55.795704 31.389902 c
h
W
0 0 132 43 rc
52.741001 34.113773 m
58.970703 34.113773 l
58.970703 25.326103 l
52.741001 25.326103 l
h
f
Q
q
59.377003 31.304604 m
59.377003 28.112803 l
59.377003 27.867403 59.415604 27.666903 59.492901 27.511204 c
59.635502 27.223904 59.901402 27.080303 60.290703 27.080303 c
60.8493 27.080303 61.229603 27.331703 61.431702 27.834503 c
61.541603 28.103804 61.596603 28.473404 61.596603 28.943302 c
61.596603 31.304604 l
62.398804 31.304604 l
62.398804 26.496702 l
61.641102 26.496702 l
61.650101 27.206003 l
61.546101 27.023403 61.416801 26.869303 61.262302 26.743603 c
60.956303 26.492203 60.584801 26.366503 60.148003 26.366503 c
59.467602 26.366503 59.004101 26.595404 58.757401 27.053303 c
58.623703 27.298803 58.556904 27.626503 58.556904 28.036503 c
58.556904 31.304604 l
59.377003 31.304604 l
h
W
0 0 132 43 rc
57.556904 32.304604 m
63.398804 32.304604 l
63.398804 25.366503 l
57.556904 25.366503 l
h
f
Q
q
62.888401 27.134203 m
65.718605 30.581903 l
63.0979 30.581903 l
63.0979 31.304604 l
66.797203 31.304604 l
66.797203 30.644703 l
63.984802 27.219402 l
66.881905 27.219402 l
66.881905 26.496702 l
62.888401 26.496702 l
62.888401 27.134203 l
h
W
0 0 132 43 rc
61.888401 32.304604 m
67.881905 32.304604 l
67.881905 25.496702 l
61.888401 25.496702 l
h
f
Q
q
67.398201 31.282204 m
68.213799 31.282204 l
68.213799 26.496702 l
67.398201 26.496702 l
67.398201 31.282204 l
h
67.398201 33.091324 m
68.213799 33.091324 l
68.213799 32.175503 l
67.398201 32.175503 l
67.398201 33.091324 l
h
W
0 0 132 43 rc
66.398201 34.091324 m
69.213799 34.091324 l
69.213799 25.496702 l
66.398201 25.496702 l
h
f
Q
q
69.528 28.844503 m
69.528 28.329803 69.636398 27.898804 69.853302 27.551603 c
70.070206 27.204502 70.4179 27.030903 70.896301 27.030903 c
71.2677 27.030903 71.572304 27.191004 71.810005 27.511204 c
72.050606 27.834503 72.171005 28.296904 72.171005 28.898403 c
72.171005 29.505903 72.047699 29.954903 71.801003 30.245203 c
71.554405 30.538504 71.249901 30.685102 70.887405 30.685102 c
70.4832 30.685102 70.1549 30.529503 69.902306 30.218203 c
69.652802 29.907003 69.528 29.449102 69.528 28.844503 c
h
70.735802 31.389902 m
71.101303 31.389902 71.407303 31.312103 71.653999 31.156504 c
71.7966 31.066704 71.958504 30.909603 72.139801 30.685102 c
72.139801 33.113773 l
72.910904 33.113773 l
72.910904 26.496702 l
72.188805 26.496702 l
72.188805 27.165604 l
72.001602 26.869303 71.780205 26.655302 71.524704 26.523603 c
71.269203 26.391903 70.976501 26.326103 70.646706 26.326103 c
70.114799 26.326103 69.654205 26.550604 69.264999 26.999502 c
68.875702 27.451403 68.681099 28.051403 68.681099 28.799603 c
68.681099 29.500004 68.857903 30.106003 69.211502 30.617804 c
69.5681 31.132504 70.076202 31.389902 70.735802 31.389902 c
h
W
0 0 132 43 rc
67.681099 34.113773 m
73.910904 34.113773 l
73.910904 25.326103 l
67.681099 25.326103 l
h
f
Q
q
81.699005 27.039503 m
82.073303 27.039503 82.383705 27.196604 82.630203 27.510702 c
82.8797 27.827803 83.004402 28.300503 83.004402 28.928802 c
83.004402 29.311703 82.949501 29.640802 82.8396 29.916002 c
82.631699 30.445503 82.251503 30.710302 81.699005 30.710302 c
81.1436 30.710302 80.763405 30.430603 80.558502 29.871103 c
80.448601 29.572002 80.3936 29.192003 80.3936 28.731302 c
80.3936 28.360403 80.448601 28.044703 80.558502 27.784504 c
80.766403 27.287903 81.146599 27.039503 81.699005 27.039503 c
h
79.622902 31.280203 m
80.402504 31.280203 l
80.402504 30.643003 l
80.562904 30.861403 80.738205 31.030403 80.928299 31.150103 c
81.198601 31.329603 81.516403 31.419304 81.881699 31.419304 c
82.422302 31.419304 82.881203 31.209904 83.2584 30.791103 c
83.635605 30.375202 83.824203 29.779903 83.824203 29.005102 c
83.824203 27.958002 83.552399 27.210102 83.008904 26.761303 c
82.664299 26.477102 82.263405 26.335003 81.806 26.335003 c
81.446602 26.335003 81.145103 26.414303 80.901505 26.572803 c
80.759003 26.662603 80.600105 26.816704 80.424805 27.035103 c
80.424805 24.580402 l
79.622902 24.580402 l
79.622902 31.280203 l
h
W
0 0 132 43 rc
78.622902 32.419304 m
84.824203 32.419304 l
84.824203 23.580402 l
78.622902 23.580402 l
h
f
Q
q
88.935501 31.302603 m
89.697304 31.302603 l
89.697304 30.472504 l
89.759705 30.634003 89.912704 30.830004 90.156204 31.060303 c
90.399803 31.293703 90.680504 31.410303 90.998299 31.410303 c
91.0131 31.410303 91.038399 31.408804 91.074005 31.405804 c
91.109703 31.402903 91.170601 31.396902 91.256699 31.387903 c
91.256699 30.535303 l
91.209206 30.544304 91.164604 30.550203 91.123001 30.553204 c
91.084404 30.556204 91.041405 30.557703 90.993805 30.557703 c
90.589905 30.557703 90.279503 30.426104 90.062698 30.162804 c
89.845901 29.902502 89.737404 29.601904 89.737404 29.260803 c
89.737404 26.496603 l
88.935501 26.496603 l
88.935501 31.302603 l
h
W
0 0 132 43 rc
87.935501 32.410301 m
92.256699 32.410301 l
92.256699 25.496603 l
87.935501 25.496603 l
h
f
Q
q
92.910103 33.111202 m
93.712006 33.111202 l
93.712006 30.652103 l
93.9021 30.894403 94.072899 31.064903 94.224403 31.163603 c
94.482803 31.334204 94.805099 31.419403 95.1912 31.419403 c
95.883301 31.419403 96.352501 31.175604 96.599098 30.688004 c
96.732704 30.421703 96.799599 30.052202 96.799599 29.579603 c
96.799599 26.496702 l
95.975304 26.496702 l
95.975304 29.525703 l
95.975304 29.878702 95.930801 30.137503 95.841705 30.302103 c
95.696098 30.565304 95.422905 30.696903 95.021904 30.696903 c
94.689201 30.696903 94.387802 30.581802 94.1175 30.351402 c
93.847198 30.121103 93.712006 29.685802 93.712006 29.045603 c
93.712006 26.496702 l
92.910103 26.496702 l
92.910103 33.111202 l
h
W
0 0 132 43 rc
91.910103 34.111202 m
97.799599 34.111202 l
97.799599 25.496702 l
91.910103 25.496702 l
h
f
Q
q
98.267403 31.302803 m
98.267403 28.112204 l
98.267403 27.866903 98.306099 27.666403 98.383301 27.510902 c
98.525902 27.223703 98.791702 27.080103 99.180801 27.080103 c
99.739204 27.080103 100.1194 27.331404 100.3213 27.833902 c
100.43121 28.103203 100.4857 28.472704 100.4857 28.942404 c
100.4857 31.302803 l
101.2877 31.302803 l
101.2877 26.496702 l
100.5307 26.496702 l
100.5397 27.205704 l
100.4357 27.023203 100.3065 26.869102 100.152 26.743504 c
99.8461 26.492203 99.4748 26.366503 99.0382 26.366503 c
98.358002 26.366503 97.894699 26.595404 97.648201 27.053102 c
97.514503 27.298403 97.447701 27.626003 97.447701 28.035904 c
97.447701 31.302803 l
98.267403 31.302803 l
h
W
0 0 132 43 rc
96.447701 32.302803 m
102.2877 32.302803 l
102.2877 25.366503 l
96.447701 25.366503 l
h
f
Q
q
102.1317 31.302803 m
102.92471 31.302803 l
102.92471 30.620703 l
103.1147 30.857002 103.2877 31.029003 103.4417 31.136703 c
103.7067 31.319202 104.0067 31.410503 104.34171 31.410503 c
104.7217 31.410503 105.0277 31.316202 105.2597 31.127703 c
105.3907 31.020002 105.50871 30.861504 105.6157 30.652103 c
105.7947 30.909403 106.0037 31.099302 106.24471 31.222004 c
106.4847 31.347603 106.7547 31.410503 107.0547 31.410503 c
107.6967 31.410503 108.13371 31.177103 108.3647 30.710403 c
108.4897 30.459103 108.5517 30.121103 108.5517 29.696203 c
108.5517 26.496702 l
107.7187 26.496702 l
107.7187 29.835403 l
107.7187 30.155502 107.6387 30.375303 107.4787 30.495003 c
107.3207 30.614702 107.1277 30.674503 106.8987 30.674503 c
106.5847 30.674503 106.3127 30.568302 106.0837 30.355904 c
105.8577 30.143503 105.7457 29.789003 105.7457 29.292402 c
105.7457 26.496702 l
104.9297 26.496702 l
104.9297 29.633404 l
104.9297 29.959503 104.8917 30.197304 104.81371 30.346903 c
104.6927 30.571302 104.4647 30.683502 104.13271 30.683502 c
103.8297 30.683502 103.5537 30.565304 103.3037 30.329002 c
103.0577 30.092604 102.9337 29.664803 102.9337 29.045603 c
102.9337 26.496702 l
102.1317 26.496702 l
102.1317 31.302803 l
h
W
0 0 132 43 rc
101.1317 32.410503 m
109.5517 32.410503 l
109.5517 25.496702 l
101.1317 25.496702 l
h
f
Q
q
109.9037 27.775602 m
109.9037 27.542204 109.9877 27.358204 110.1567 27.223602 c
110.3267 27.089003 110.5267 27.021704 110.75871 27.021704 c
111.0407 27.021704 111.31371 27.087503 111.5787 27.219103 c
112.0237 27.437504 112.2467 27.795004 112.2467 28.291603 c
112.2467 28.942303 l
112.1487 28.879503 112.02271 28.827103 111.8677 28.785303 c
111.7137 28.743402 111.5617 28.713503 111.4137 28.695503 c
110.9277 28.632704 l
110.6367 28.593803 110.4187 28.532503 110.27271 28.448704 c
110.0267 28.308104 109.9037 28.083702 109.9037 27.775602 c
h
111.8457 29.409002 m
112.0297 29.433002 112.1527 29.510702 112.2157 29.642403 c
112.2507 29.714203 112.2687 29.817404 112.2687 29.952003 c
112.2687 30.227203 112.1707 30.426203 111.9747 30.548803 c
111.7817 30.674503 111.5037 30.737303 111.1417 30.737303 c
110.7227 30.737303 110.4257 30.623604 110.2507 30.396303 c
110.1527 30.270603 110.0887 30.083603 110.0587 29.835302 c
109.3107 29.835302 l
109.3257 30.427704 109.5157 30.839003 109.8807 31.069403 c
110.2497 31.302704 110.6757 31.419403 111.1597 31.419403 c
111.7207 31.419403 112.1767 31.311703 112.5277 31.096304 c
112.8747 30.880903 113.0487 30.545803 113.0487 30.091103 c
113.0487 27.322403 l
113.0487 27.238604 113.0647 27.171303 113.0977 27.120403 c
113.13371 27.069603 113.2057 27.044104 113.3157 27.044104 c
113.3517 27.044104 113.3917 27.045603 113.4367 27.048603 c
113.48071 27.054604 113.5287 27.062103 113.5787 27.071102 c
113.5787 26.474203 l
113.4537 26.438303 113.3587 26.415903 113.2937 26.406902 c
113.2287 26.397903 113.1397 26.393402 113.0267 26.393402 c
112.7497 26.393402 112.54971 26.492203 112.42471 26.689604 c
112.3597 26.794304 112.31371 26.942404 112.28671 27.133904 c
112.1237 26.918503 111.8887 26.731503 111.5827 26.572903 c
111.2767 26.414404 110.9397 26.335102 110.5717 26.335102 c
110.1287 26.335102 109.7667 26.469704 109.4847 26.739002 c
109.2057 27.011204 109.0657 27.350803 109.0657 27.757603 c
109.0657 28.203403 109.2037 28.548903 109.47971 28.794203 c
109.7557 29.039602 110.11871 29.190603 110.5667 29.247503 c
111.8457 29.409002 l
h
W
0 0 132 43 rc
108.0657 32.419403 m
114.5787 32.419403 l
114.5787 25.335102 l
108.0657 25.335102 l
h
f
Q
q
114.0937 31.302704 m
114.85571 31.302704 l
114.85571 30.620604 l
115.0817 30.901802 115.3207 31.103804 115.5727 31.226402 c
115.8257 31.349104 116.10571 31.410402 116.4147 31.410402 c
117.09171 31.410402 117.54971 31.172604 117.78671 30.696903 c
117.9177 30.436604 117.9827 30.064203 117.9827 29.579502 c
117.9827 26.496702 l
117.1677 26.496702 l
117.1677 29.525703 l
117.1677 29.818903 117.1247 30.055202 117.0387 30.234703 c
116.8957 30.533903 116.6377 30.683502 116.2637 30.683502 c
116.0737 30.683502 115.9177 30.664003 115.7957 30.625103 c
115.5757 30.559303 115.38271 30.427704 115.21671 30.230204 c
115.0827 30.071703 114.99471 29.907103 114.9537 29.736603 c
114.9147 29.569103 114.8957 29.328203 114.8957 29.014103 c
114.8957 26.496702 l
114.0937 26.496702 l
114.0937 31.302704 l
h
W
0 0 132 43 rc
113.0937 32.410404 m
118.9827 32.410404 l
118.9827 25.496702 l
113.0937 25.496702 l
h
f
Q
q
75.4785 31.453003 m
75.508202 31.453003 75.5373 31.452103 75.565804 31.450302 c
76.146202 31.422903 76.611 31.185904 77.0009 30.739103 c
77.416199 30.263203 77.569199 29.597803 77.569199 28.743004 c
77.569199 28.045803 77.379799 27.463802 77.0009 26.997004 c
76.622002 26.533203 76.114204 26.301304 75.477699 26.301304 c
75.446899 26.301502 l
75.419899 26.301304 l
74.783401 26.301304 74.275604 26.533203 73.896706 26.997004 c
73.517799 27.463802 73.3283 28.045803 73.3283 28.743004 c
73.3283 29.597803 73.4814 30.263203 73.896706 30.739103 c
74.2649 31.161003 74.730003 31.395903 75.266205 31.443804 c
75.324104 31.449802 75.385201 31.453003 75.449905 31.453003 c
75.462799 31.453003 l
75.4785 31.453003 l
h
74.419601 29.957003 m
74.641701 30.461403 74.951004 30.716003 75.463402 30.720903 c
75.976105 30.716503 76.2556 30.461903 76.478004 29.957003 c
76.623505 29.626602 76.696205 29.218903 76.696205 28.733904 c
76.696205 28.245903 76.593201 27.835102 76.387001 27.501703 c
76.186302 27.177103 75.873604 27.010504 75.448799 27.001904 c
75.024002 27.010504 74.711205 27.177103 74.510506 27.501703 c
74.304405 27.835102 74.201302 28.245903 74.201302 28.733904 c
74.201302 29.218903 74.274101 29.626602 74.419601 29.957003 c
h
W*
0 0 132 43 rc
72.3283 32.453003 m
78.569199 32.453003 l
78.569199 25.301304 l
72.3283 25.301304 l
h
f
Q
q
86.306404 31.453003 m
86.336105 31.453003 86.365204 31.452103 86.3937 31.450302 c
86.974098 31.422903 87.439003 31.185904 87.828804 30.739103 c
88.244102 30.263203 88.397202 29.597803 88.397202 28.743004 c
88.397202 28.045803 88.207703 27.463802 87.828804 26.997004 c
87.449905 26.533203 86.942101 26.301304 86.305603 26.301304 c
86.274803 26.301502 l
86.247803 26.301304 l
85.611305 26.301304 85.1035 26.533203 84.724602 26.997004 c
84.345703 27.463802 84.156204 28.045803 84.156204 28.743004 c
84.156204 29.597803 84.309303 30.263203 84.724602 30.739103 c
85.092804 31.161003 85.557899 31.395903 86.094101 31.443804 c
86.152 31.449802 86.213104 31.453003 86.277802 31.453003 c
86.290703 31.453003 l
86.306404 31.453003 l
h
85.247505 29.957003 m
85.469604 30.461403 85.7789 30.716003 86.291306 30.720903 c
86.8041 30.716503 87.083504 30.461903 87.305901 29.957003 c
87.451401 29.626602 87.524101 29.218903 87.524101 28.733904 c
87.524101 28.245903 87.421104 27.835102 87.214905 27.501703 c
87.014305 27.177103 86.7015 27.010504 86.276703 27.001904 c
85.851898 27.010504 85.539101 27.177103 85.338402 27.501703 c
85.132301 27.835102 85.029305 28.245903 85.029305 28.733904 c
85.029305 29.218903 85.102005 29.626602 85.247505 29.957003 c
h
W*
0 0 132 43 rc
83.156204 32.453003 m
89.397202 32.453003 l
89.397202 25.301304 l
83.156204 25.301304 l
h
f
Q
q
120.6947 31.453003 m
120.7247 31.453003 120.7537 31.452103 120.7817 31.450302 c
121.3627 31.422903 121.82771 31.185904 122.21671 30.739103 c
122.63271 30.263203 122.78571 29.597803 122.78571 28.743004 c
122.78571 28.045803 122.5957 27.463802 122.21671 26.997004 c
121.8387 26.533203 121.3307 26.301304 120.6937 26.301304 c
120.6627 26.301502 l
120.6357 26.301304 l
119.9997 26.301304 119.4917 26.533203 119.1127 26.997004 c
118.7337 27.463802 118.5447 28.045803 118.5447 28.743004 c
118.5447 29.597803 118.6977 30.263203 119.1127 30.739103 c
119.48071 31.161003 119.9467 31.395903 120.4827 31.443804 c
120.5407 31.449802 120.6017 31.453003 120.6657 31.453003 c
120.6787 31.453003 l
120.6947 31.453003 l
h
119.6357 29.957003 m
119.8577 30.461403 120.1677 30.716003 120.6797 30.720903 c
121.1927 30.716503 121.4717 30.461903 121.6947 29.957003 c
121.8397 29.626602 121.9127 29.218903 121.9127 28.733904 c
121.9127 28.245903 121.8097 27.835102 121.6037 27.501703 c
121.4027 27.177103 121.0897 27.010504 120.6647 27.001904 c
120.2407 27.010504 119.9277 27.177103 119.7267 27.501703 c
119.5207 27.835102 119.4177 28.245903 119.4177 28.733904 c
119.4177 29.218903 119.4907 29.626602 119.6357 29.957003 c
h
W*
0 0 132 43 rc
117.5447 32.453003 m
123.78571 32.453003 l
123.78571 25.301304 l
117.5447 25.301304 l
h
f
Q
q
51.284603 31.453003 m
51.314301 31.453003 51.343403 31.452103 51.371902 31.450302 c
51.952301 31.422903 52.417103 31.185904 52.807003 30.739103 c
53.222301 30.263203 53.375301 29.597803 53.375301 28.743004 c
53.375301 28.045803 53.185902 27.463802 52.807003 26.997004 c
52.428101 26.533203 51.920303 26.301304 51.283703 26.301304 c
51.253002 26.301502 l
51.226002 26.301304 l
50.589401 26.301304 50.081703 26.533203 49.702801 26.997004 c
49.323902 27.463802 49.134403 28.045803 49.134403 28.743004 c
49.134403 29.597803 49.287502 30.263203 49.702801 30.739103 c
50.070904 31.161003 50.536102 31.395903 51.072304 31.443804 c
51.130203 31.449802 51.191303 31.453003 51.256001 31.453003 c
51.268902 31.453003 l
51.284603 31.453003 l
h
50.2257 29.957003 m
50.447803 30.461403 50.757103 30.716003 51.269402 30.720903 c
51.782204 30.716503 52.061703 30.461903 52.284103 29.957003 c
52.429604 29.626602 52.5023 29.218903 52.5023 28.733904 c
52.5023 28.245903 52.399303 27.835102 52.193104 27.501703 c
51.992401 27.177103 51.679703 27.010504 51.254803 27.001904 c
50.830101 27.010504 50.517303 27.177103 50.316601 27.501703 c
50.1105 27.835102 50.007401 28.245903 50.007401 28.733904 c
50.007401 29.218903 50.0802 29.626602 50.2257 29.957003 c
h
W*
0 0 132 43 rc
48.134403 32.453003 m
54.375301 32.453003 l
54.375301 25.301304 l
48.134403 25.301304 l
h
f
Q
q
17.118002 18.630703 m
20.631102 15.785903 25.655401 15.785903 29.168503 18.630703 c
27.810102 20.308104 l
25.089003 18.104603 21.197502 18.104603 18.476402 20.308104 c
17.118002 18.630703 l
h
W
0 0 132 43 rc
16.118002 21.308104 m
30.168503 21.308104 l
30.168503 14.785903 l
16.118002 14.785903 l
h
f
Q
q
18.581102 22.324303 2.1584001 2.9159 rc
17.581102 26.240204 m
21.739502 26.240204 l
21.739502 21.324303 l
17.581102 21.324303 l
h
f
Q
q
25.278803 22.324303 2.1584001 2.9159 rc
24.278803 26.240204 m
28.437202 26.240204 l
28.437202 21.324303 l
24.278803 21.324303 l
h
f
Q
q
34.388702 21.324303 m
34.388702 14.886803 29.170101 9.6682034 22.732702 9.6682034 c
16.295202 9.6682034 11.076602 14.886803 11.076602 21.324303 c
11.076602 27.761803 16.295202 32.980343 22.732702 32.980343 c
29.170101 32.980343 34.388702 27.761803 34.388702 21.324303 c
h
32.230301 21.324303 m
32.230301 16.078903 27.978102 11.826703 22.732702 11.826703 c
17.487303 11.826703 13.235002 16.078903 13.235002 21.324303 c
13.235002 26.569702 17.487303 30.821903 22.732702 30.821903 c
27.978102 30.821903 32.230301 26.569702 32.230301 21.324303 c
h
W*
0 0 132 43 rc
10.076602 33.980343 m
35.388702 33.980343 l
35.388702 8.6682034 l
10.076602 8.6682034 l
h
f
ep
end
%%Trailer
%%EOF
